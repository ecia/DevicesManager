//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DevicesManager.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService", CallbackContract=typeof(DevicesManager.ServiceReference.IServiceCallback))]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDeviceData", ReplyAction="http://tempuri.org/IService/GetDeviceDataResponse")]
        WcfService.Contracts.DeviceDataContract GetDeviceData(int deviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDeviceData", ReplyAction="http://tempuri.org/IService/GetDeviceDataResponse")]
        System.Threading.Tasks.Task<WcfService.Contracts.DeviceDataContract> GetDeviceDataAsync(int deviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetDeviceData", ReplyAction="http://tempuri.org/IService/SetDeviceDataResponse")]
        void SetDeviceData(int deviceId, double cpu, double ram);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetDeviceData", ReplyAction="http://tempuri.org/IService/SetDeviceDataResponse")]
        System.Threading.Tasks.Task SetDeviceDataAsync(int deviceId, double cpu, double ram);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Upload", ReplyAction="http://tempuri.org/IService/UploadResponse")]
        void Upload(int deviceId, byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Upload", ReplyAction="http://tempuri.org/IService/UploadResponse")]
        System.Threading.Tasks.Task UploadAsync(int deviceId, byte[] input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Download", ReplyAction="http://tempuri.org/IService/DownloadResponse")]
        System.IO.Stream Download(int deviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Download", ReplyAction="http://tempuri.org/IService/DownloadResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> DownloadAsync(int deviceId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/OnCallback", ReplyAction="http://tempuri.org/IService/OnCallbackResponse")]
        void OnCallback();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : DevicesManager.ServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.DuplexClientBase<DevicesManager.ServiceReference.IService>, DevicesManager.ServiceReference.IService {
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public WcfService.Contracts.DeviceDataContract GetDeviceData(int deviceId) {
            return base.Channel.GetDeviceData(deviceId);
        }
        
        public System.Threading.Tasks.Task<WcfService.Contracts.DeviceDataContract> GetDeviceDataAsync(int deviceId) {
            return base.Channel.GetDeviceDataAsync(deviceId);
        }
        
        public void SetDeviceData(int deviceId, double cpu, double ram) {
            base.Channel.SetDeviceData(deviceId, cpu, ram);
        }
        
        public System.Threading.Tasks.Task SetDeviceDataAsync(int deviceId, double cpu, double ram) {
            return base.Channel.SetDeviceDataAsync(deviceId, cpu, ram);
        }
        
        public void Upload(int deviceId, byte[] input) {
            base.Channel.Upload(deviceId, input);
        }
        
        public System.Threading.Tasks.Task UploadAsync(int deviceId, byte[] input) {
            return base.Channel.UploadAsync(deviceId, input);
        }
        
        public System.IO.Stream Download(int deviceId) {
            return base.Channel.Download(deviceId);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> DownloadAsync(int deviceId) {
            return base.Channel.DownloadAsync(deviceId);
        }
    }
}
