//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DevicesManager.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCPUPerformence", ReplyAction="http://tempuri.org/IService/GetCPUPerformenceResponse")]
        double GetCPUPerformence();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCPUPerformence", ReplyAction="http://tempuri.org/IService/GetCPUPerformenceResponse")]
        System.Threading.Tasks.Task<double> GetCPUPerformenceAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetRAMPerformence", ReplyAction="http://tempuri.org/IService/GetRAMPerformenceResponse")]
        double GetRAMPerformence();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetRAMPerformence", ReplyAction="http://tempuri.org/IService/GetRAMPerformenceResponse")]
        System.Threading.Tasks.Task<double> GetRAMPerformenceAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetCPUPerformence", ReplyAction="http://tempuri.org/IService/SetCPUPerformenceResponse")]
        void SetCPUPerformence(double cpu);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetCPUPerformence", ReplyAction="http://tempuri.org/IService/SetCPUPerformenceResponse")]
        System.Threading.Tasks.Task SetCPUPerformenceAsync(double cpu);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetRAMPerformence", ReplyAction="http://tempuri.org/IService/SetRAMPerformenceResponse")]
        void SetRAMPerformence(double ram);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetRAMPerformence", ReplyAction="http://tempuri.org/IService/SetRAMPerformenceResponse")]
        System.Threading.Tasks.Task SetRAMPerformenceAsync(double ram);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Upload", ReplyAction="http://tempuri.org/IService/UploadResponse")]
        string Upload(System.IO.Stream input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Upload", ReplyAction="http://tempuri.org/IService/UploadResponse")]
        System.Threading.Tasks.Task<string> UploadAsync(System.IO.Stream input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Download", ReplyAction="http://tempuri.org/IService/DownloadResponse")]
        System.IO.Stream Download(string file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Download", ReplyAction="http://tempuri.org/IService/DownloadResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> DownloadAsync(string file);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : DevicesManager.ServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<DevicesManager.ServiceReference.IService>, DevicesManager.ServiceReference.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double GetCPUPerformence() {
            return base.Channel.GetCPUPerformence();
        }
        
        public System.Threading.Tasks.Task<double> GetCPUPerformenceAsync() {
            return base.Channel.GetCPUPerformenceAsync();
        }
        
        public double GetRAMPerformence() {
            return base.Channel.GetRAMPerformence();
        }
        
        public System.Threading.Tasks.Task<double> GetRAMPerformenceAsync() {
            return base.Channel.GetRAMPerformenceAsync();
        }
        
        public void SetCPUPerformence(double cpu) {
            base.Channel.SetCPUPerformence(cpu);
        }
        
        public System.Threading.Tasks.Task SetCPUPerformenceAsync(double cpu) {
            return base.Channel.SetCPUPerformenceAsync(cpu);
        }
        
        public void SetRAMPerformence(double ram) {
            base.Channel.SetRAMPerformence(ram);
        }
        
        public System.Threading.Tasks.Task SetRAMPerformenceAsync(double ram) {
            return base.Channel.SetRAMPerformenceAsync(ram);
        }
        
        public string Upload(System.IO.Stream input) {
            return base.Channel.Upload(input);
        }
        
        public System.Threading.Tasks.Task<string> UploadAsync(System.IO.Stream input) {
            return base.Channel.UploadAsync(input);
        }
        
        public System.IO.Stream Download(string file) {
            return base.Channel.Download(file);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> DownloadAsync(string file) {
            return base.Channel.DownloadAsync(file);
        }
    }
}
